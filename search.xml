<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>给你的旧电脑装上Windows 11——用Dism++绕开微软限制</title>
      <link href="/2021/10/24/gei-ni-de-jiu-dian-nao-zhuang-shang-windows-11-yong-dism-rao-kai-wei-ruan-xian-zhi/"/>
      <url>/2021/10/24/gei-ni-de-jiu-dian-nao-zhuang-shang-windows-11-yong-dism-rao-kai-wei-ruan-xian-zhi/</url>
      
        <content type="html"><![CDATA[<p>Windows 11正式版已经出来一段时间了，不过当你兴奋地下载好，打算安装体验一番的时候<br><img src="https://raw.githubusercontent.com/ZnCookie/Picture/main/Windows%2011-2021-10-24-13-55-11.png"><br>好家伙，你搁这不给我装呢</p><p>但是其实能运行Win10 x64的设备大部分都可以安装Win11（比如我的戴尔笔记本，处理器Intel i5-4200U，安装时提示不支持Win11但是最后还是装上了）<br>不过既然常规方法不能用，我们就只能使用一些<del>奇淫技巧</del>其他的方法了。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>U盘（大于或等于8G）</li><li>Windows 11镜像文件</li><li><a href="https://github.com/Chuyu-Team/Dism-Multi-language/releases/">Dism++软件本体</a></li></ol><p>首先，你需要将你的U盘制作成PE启动盘，个人推荐用<a href="https://www.wepe.com.cn/">微PE</a><br>教程网上有很多，这边就不再赘述<br>制作完成后将Windows 11镜像文件和Dism++软件本体复制到U盘里</p><h2 id="进入PE"><a href="#进入PE" class="headerlink" title="进入PE"></a>进入PE</h2><p>这一步根据电脑主板型号不同有所差别，建议百度╮(╯▽╰)╭</p><h2 id="用Dism-释放镜像"><a href="#用Dism-释放镜像" class="headerlink" title="用Dism++释放镜像"></a>用Dism++释放镜像</h2><p>打开Dism++，点击左上角的文件 ——》释放镜像<br><img src="https://raw.githubusercontent.com/ZnCookie/Picture/main/Windows%2011-2021-10-24-14-12-25.png"><br>选中ISO镜像文件（或者挂载了虚拟光驱选择sources\install.wim）<br>目标映像选择自己需要的Win11版本，这里显示Win10应该是个Bug<del>（Win11套壳Win10实锤了）</del><br><img src="https://raw.githubusercontent.com/ZnCookie/Picture/main/Windows%2011-2021-10-24-14-12-14.png"><br>不要打开Compact，会蓝屏（黑屏）</p><p>点击“确认”等待完成后重启电脑，Windows 11就安装完了ヽ(✿ﾟ▽ﾟ)ノ</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我闲着没事在Android设备上挖矿的这档事</title>
      <link href="/2021/10/23/guan-yu-wo-xian-zhao-mei-shi-zai-android-she-bei-shang-wa-kuang-de-zhe-dang-shi/"/>
      <url>/2021/10/23/guan-yu-wo-xian-zhao-mei-shi-zai-android-she-bei-shang-wa-kuang-de-zhe-dang-shi/</url>
      
        <content type="html"><![CDATA[<p><del>故事还要从袁隆平出生说起</del></p><p>众所周知，Android系统底层是Linux内核<br>今天的主角叫做termux</p><blockquote><p>Termux is a terminal emulator and Linux environment bringing powerful terminal access to Android.</p></blockquote><p>Termux 是运行在 Android 上的 terminal。不需要root，运行于内部存储（不在SD卡上）。<br>最重要的是，termux自带了一个包管理器，可以安装许多现代化的开发和系统维护工具。<br>许多在Linux系统上运行的程序都可以十分轻松的移植到termux里运行。你甚至可以在上面运行QEMU在上面运行Windows（有成熟的解决方案，不过很慢）。</p><h2 id="安装Termux"><a href="#安装Termux" class="headerlink" title="安装Termux"></a>安装Termux</h2><p>Termux对系统的要求是Android 7.0及以上，在ARM以及X86设备上都可以运行<br>你可以<a href="https://f-droid.org/packages/com.termux/" title="点击这里下载">点击这里下载</a></p><p>因为种种原因<del>（为了榨干旧设备）</del>所以我决定在termux上编译运行xmrig来挖门罗币<br>原因：常见主流加密货币（例如比特币、以太坊）因为算法没有针对ASCI矿机进行抵制，从而导致大量算力集中在矿老板手中，个人挖矿收益极低<del>（简单来说就是你算力干不过人家）</del>。<br>而XMR的算法使普通设备也有了挖矿赚取收益的机会（虽然少，但是至少比其他币种可观）</p><p>为了避免接下来遇到问题，先执行下<code>apt update &amp;&amp; apt upgrade</code></p><h2 id="搭建proot容器"><a href="#搭建proot容器" class="headerlink" title="搭建proot容器"></a>搭建proot容器</h2><p>这里用到了T Moe <a href="https://github.com/2moe/tmoe-linux" title="项目地址">项目地址</a></p><pre class="line-numbers language-none"><code class="language-none">. &lt;(curl -L gitee.com/mo2/linux/raw/2/2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照提示选择proot容器”-》arm64发行版列表(按照处理器类型不同，也有可能是armel之类的)</p><p>个人推荐用Ubuntu或Debian，其他系统区别主要在安装依赖时需要使用其他的包管理器<br>例如Debian系的使用的是apt，RedHat系的使用的是yum，Arch系的使用的是pacman</p><p>接下来按照提示和自己需求选择，完成后会自动进入proot容器内<br>以后想再次进入可以在termux里执行<code>bash ~/容器选择菜单.sh</code></p><h2 id="克隆项目-amp-安装依赖"><a href="#克隆项目-amp-安装依赖" class="headerlink" title="克隆项目&amp;安装依赖"></a>克隆项目&amp;安装依赖</h2><p>这里用的xmrig是C3Pool矿池修改后的版本，首先安装依赖并将源代码克隆到本地</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install git build-essential cmake automake libtool autoconfgit clone https://github.com/C3Pool/xmrig-C3.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以修改下xmrig的抽水（可选）<br>用nano或者你熟悉的编辑器打开<code>xmrig-C3/src/donate.h</code><br>将下面两条后面的数值都改成0</p><pre class="line-numbers language-none"><code class="language-none">constexpr const int kDefaultDonateLevel = 0; constexpr const int kMinimumDonateLevel = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>参考了<a href="https://xmrig.com/docs/miner/build/ubuntu" title="xmrig官方的教程">xmrig官方的教程</a>并做了一点点修改<br>之所以采用了静态编译是为了减少出问题的几率，理论上动态编译也是可以的<br>可能需要科学上网</p><pre class="line-numbers language-none"><code class="language-none">mkdir xmrig-C3/build &amp;&amp; cd xmrig-C3/scripts &amp;&amp; chmod +x *.sh &amp;&amp; ./build_deps.sh &amp;&amp; cd ../build &amp;&amp; cmake .. -DXMRIG_DEPS=scripts/deps &amp;&amp;  make -j$(nproc)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>32位环境的ARM设备用这个</p><pre class="line-numbers language-none"><code class="language-none">mkdir xmrig-C3/build &amp;&amp; cd xmrig-C3/scripts &amp;&amp; chmod +x *.sh &amp;&amp; ./build_deps.sh &amp;&amp; cd ../build &amp;&amp; cmake .. -DARM_TARGET=7 -DXMRIG_DEPS=scripts/deps &amp;&amp;  make -j$(nproc)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>耐心等待编译完成，编译出来的程序会被保存在xmrig-C3/build文件夹内</p><h2 id="启动挖矿"><a href="#启动挖矿" class="headerlink" title="启动挖矿"></a>启动挖矿</h2><pre class="line-numbers language-none"><code class="language-none">./xmrig -o mine.c3pool.com:13333-u 钱包地址 -p 矿工名称 --randomx-1gb-pages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以到<a href="https://c3pool.com/" title="猫池官网">猫池官网</a>输入钱包地址来查看收益和矿工情况</p>]]></content>
      
      
      <categories>
          
          <category> 折腾termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
